* Chemistry                                                       :chemistry:
** Biochar
See http://www.holon.se/folke/carbon/simplechar/simplechar.shtml for how to
make biochar for use in terra preta.
* Haskell                                                           :haskell:
** xmonad xubuntu
   A standard xmonad configuration with xmobar
   and stalonetray will not work with xubuntu unless
   xfdesktop and xfce4-panel are disabled or replaced
   by something more compatible with them.
   As of xfce 4.14, this has to be done with ~xfconf-query~.
   First, set the window manager to ~xmonad~.
   #+begin_src bash
     xfconf-query -c xfce4-session \
                  -p /sessions/Failsafe/Client0_Command \
                  -t string -s "xmonad" -a
   #+end_src
   Then replace ~xfce4-panel~ with ~stalonetray~:
   #+begin_src bash
     xfconf-query -c xfce4-session \
                  -p /sessions/Failsafe/Client2_Command \
                  -t string -s "stalonetray" -a
   #+end_src
   Instead of ~xfdesktop~ simply run ~/usr/bin/true~:
   #+begin_src bash
     xfconf-query -c xfce4-session \
                  -p /sessions/Failsafe/Client4_Command \
                  -t string -s "true" -a
   #+end_src
   Or even better, start nm-applet here? This way it will show up quicker.
   The only problem is that it becomes part of a failsafe session, so
   if nm-applet is the cause for failure then the faisafe session would fail?
   
   Make sure no sessions are safed on logout. Reconfigure the
   keyboard shortcuts by deleting the ones using the ~Super~ key.
   This can be done with the regular ~xubuntu~ settings UI.

   Also, the icon theme may have to be reset using xfce
   Settings->Appearance

   To get the loud-speaker icon for a system using pulseaudio, install
   pasystray.
   
   On the Haskell side, xfceConfig can be used but some of the
   usual ~xmonad~ keybindings have to be restored since, for example,
   terminals are now started with ~C-M-t~ rather than
   ~<Super>-<Shift>-<Return>~. Also ~<Super>-p~ now runs ~xfrun~ rather
   than ~dmenu~. So ~xmonad.hs~ is something like
   #+begin_src haskell
import XMonad
import XMonad.Actions.SpawnOn
import XMonad.Config.Xfce    -- for xfceConfig
import XMonad.Hooks.DynamicLog -- allows xmobar
import XMonad.Util.EZConfig --for additionalKeysP

main = xmonad =<< xmobar ( xfceConfig
        { modMask = mod4Mask
        , startupHook = do
            spawnOn "1" "x-terminal-emulator"
            -- spawn "stalonetray"
        }
        `additionalKeysP`
         [ ("M-e", spawn "emacsclient -a '' -c -q -n -e '(dired \"~/\")'")
         , ("M-S-<Return>", spawn "x-terminal-emulator") --overwritten by xfceConfig
         , ("M-p", spawn "dmenu_run") ] -- also changed by xfceConfig, restore
                         )
   #+end_src
   The nice thing about this set-up is that the ~XFCE~ session manager
   runs and all the ~xfce4~ utilities will work, as well as ~autostart~.
   The ~xfceConfig~ defaults also set things up for ~Ewmh~ compliance
   of ~xmonad~, hence things like ~wmctrl~ work out of the box.
** Type Nats Solver                                                 :plugins:
This is another plugin for haskell, this time about
type arithmetic.
https://github.com/yav/type-nat-solver
** Units library:                                                     :units:
https://github.com/adamgundry/uom-plugin/
* Neural Networks                                                    :neural:
See
https://towardsdatascience.com/hyper-parameters-in-action-a524bf5bf1c
and its continuation for a good introduction into what's going on.
Part 2 of this is at
https://towardsdatascience.com/hyper-parameters-in-action-part-ii-weight-initializers-35aee1a28404
See
http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/
about the geometry behind neural networks.
* Phoenix                                                   :phoenixwebframe:
** sqlite                                                            :sqlite:
Use sqlite with phoenix as per the descriptions in
https://github.com/Sqlite-Ecto/sqlite_ecto2/blob/master/docs/tutorial.md
and 
https://github.com/Sqlite-Ecto/sqlite_ecto2
if using sqlite_ecto2. For sqlite_ecto see
http://twentyeighttwelve.com/creating-a-phoenix-framework-application-with-sqlite/,
note that the path to the database is relative to the project-directory,
seems to be the pwd of ~mix~, but can be made any path on the system apparently.
* Tensor Flow                                                    :tensorflow:
** Installing:                                                 :installation:
*** Haskell Bindings                                                :haskell:
 - get library: 
   ~curl https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.9.0.tar.gz >libtensorflow-1.9.0.tar.gz~
   and unpack into /usr/local:
   ~sudo tar zxf libtensorflow-1.9.0.tar.gz -C /usr/local~ then run 
   ~sudo ldconfig~
   Same thing re AVX instructions applies here, may have to compile from
   source code or use lower version binaries.
 - There is a way to just compile the binaries needed without all the python:
   https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/lib_package/README.md
 - Need to install snappy: ~apt-get install libsnappy-dev~ and protobuf-compiler
   version 3. As of 16.04 this has to be compiled from source.
 - clone tensor-flow haskell from git-hub: 
   ~git clone --recursive https://github.com/tensorflow/haskell.git tensorflow-haskell~
   then ~stack build~
 - There may be problems in tensorflow-core-ops:
    /parseAttrType: unrecognized type func for .../
   The operator mentioned in the error message has to be added to the
   /blackList/ in tensorflow-haskell/tensorflow-core-ops/Setup.hs in order
   to make the compilation succeed.
*** Source                                                           :source:
- install bazel using the bazel installer, prerequisites are already
  there in ubuntu 16.04, at least on systems where development is the
  norm
- get the bazel developpers key and verify the signature with gpg
- run the installer, use the --user flag for an install into ~/bin
- get the source from github
- run ./configure, make sure to use the local architecture
- run bazel, mind the note about a local gcc5
*** Python                                                           :python:
 - pip install -U --no-cache-dir tensorflow
   This may result in an  ~Illegal instruction (core dumped)~ message when
   running ~import tensorflow~ in the python environment. The problem are  
   AVX instructions in precompiled newer binaries. There are two solutions:
   1) Install versions beyond 1.5 from source since this is where the AVX
      instructions occur in the precompiled binaries.
   2) Downgrade: ~pip uninstall tensorflow~ followed by 
      ~pip install -U --no-cache-dir tensorflow==1.5~
 - This doesn't seem to install a termflow.so binary anywhere, it seems the
   libtensorflow_framework.so is the only binary needed when using python.
   libtensorflow.so is the compiled C-API, only required for other language
   bindings. Note there is also a Java library.



